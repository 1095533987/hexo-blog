<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DRAW LIFE</title>
  
  <subtitle>The world is made up of code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://evan-hon.netlify.app/"/>
  <updated>2021-08-05T07:41:41.560Z</updated>
  <id>https://evan-hon.netlify.app/</id>
  
  <author>
    <name>Evan Hon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机字符编码</title>
    <link href="https://evan-hon.netlify.app/3764231853.html"/>
    <id>https://evan-hon.netlify.app/3764231853.html</id>
    <published>2021-08-05T07:35:11.000Z</published>
    <updated>2021-08-05T07:41:41.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码"></a>什么是编码</h3><blockquote><p>编码是信息从一种形式或格式转换为另一种形式的过程；解码则是编码的逆过程。</p></blockquote><p>举个栗子，你和你的朋友同坐在一间教室里，中间隔着好几个人，你想通过中间的人传递纸条，告诉你的朋友一条信息“abcdefg”，但是你又不想别人知道信息的内容，这时候你就需要将信息的内容转换下，怎么转换？假设你和你的朋友以前有过约定，你们在纸条中传递内容的所有英文字母都要向后偏移一位，即a转换为b，c转换为d，z是英文字母中的最后一位，则转换为第一个字母，即a。如此，你将在纸条上写下“bcdefgh”，信息从“abcdefg”转换为“bcdefgh”的过程就是编码，所采用的编码方式是英文字母向后偏移一位，你的朋友拿到编码后的信息，再依次将字母前移一位，得到真实的信息，这是编码的逆过程，即解码。</p><h3 id="计算机中的字符为什么需要编码"><a href="#计算机中的字符为什么需要编码" class="headerlink" title="计算机中的字符为什么需要编码"></a>计算机中的字符为什么需要编码</h3><p>上面提到的例子需要编码是出于安全考虑，那计算机中的字符为什么也需要编码，是出于同样的目的吗？当然不，<strong>计算机中的字符之所以需要经过编码，归根结底是因为计算机中的所有数据只能用二进制表示</strong>，即0和1两种数值，想要在计算机系统中对我们所认知的字符加以区分，就需要使用0和1的排列来为其编码。</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>American Standard Code for Information Interchange，美国信息交换标准代码，这是<strong>最通用的信息交换标准</strong>，通用到什么程度？后边我们会了解到现代计算机系统中存在很多的字符编码，但这些编码几乎所有都兼容ASCII，即在这些兼容ASCII的字符编码中，对于ASCII可以表示的字符，编码结果保持一致。那ASCII可以表示哪些字符？</p><blockquote><p>ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符，其中有95个可显示字符，即可通过打印或是显示器展示出来，剩下的33个是控制字符或通信专用字符，如LF（换行）、CR（回车）、ACK（确认，通信专用字符）等</p></blockquote><p><strong>在ASCII中，所有字符使用7个比特位来存储</strong>，我们知道计算机系统存储单位为一个字节，通常为8个比特，剩下的1个比特位保持为0。如字符“A”的ASCII码十进制值为65，二进制为01000001，更多字符参考ASCII编码对照表。</p><h3 id="ASCII扩展"><a href="#ASCII扩展" class="headerlink" title="ASCII扩展"></a>ASCII扩展</h3><p>ASCII有其局限性，只能显示26个基本拉丁字母、阿拉伯数字和英式标点符号，仅适用于现代美国英语。对于其它同属印欧语系的语言来说，还有部分字符无法使用ASCII编码，怎么解决这个问题？我们之前提到过，ASCII仅使用一个字节中的7个比特位，还剩下一个比特位没有使用，通过排列知识我们可以算出，2^8 = 256，如果使用8个比特位，那我们将可以对256个字符进行编码，排除掉ASCII中原有的128个字符，还多出来128个空位，这已经完全足够其它印欧语系的语言使用了，如ISO 8859-1编码。</p><p>印欧语系的问题解决了，那我们汉藏语系怎么办，就拿中文来看，单就中国大陆常用字就有2500个，另外还有大量的繁体字和生僻字，我们的问题怎么解决？</p><h3 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h3><p>显然只用1个字节来存储编码已经不能满足我们的需求了，我们必须要考虑使用多个字节来表示一个汉字。GB2312-80，也叫作GB2312，是由中国国家标准总局1980年发布的一套国家标准，适用于计算机系统中汉字的处理和信息交换，<strong>这套标准便是用两个字节来存储汉字编码</strong>。</p><p>使用两个字节来存储编码有一个问题，如何兼容ASCII？我们可不可以直接抛弃ASCII，将ASCII中原有的128个字符重新编码为两个字节的编码？当然是可以的，但这样做未免有些奢侈，原本一个字节就足够表示，强行转化为两个字节最终可能会导致占用的存储空间大上许多，而且即使仅用美式英语中的128个字符也无法与其它使用ASCII编码的计算机进行通信，因为双方对于这128个字符的编码不同。</p><p>看来解决与ASCII编码的兼容问题势在必行了，我们来看看GB2312是怎么做的。</p><p><strong>GB2312使用7位双字节编码</strong>，共收录汉字6763个和非汉字图形字符682个。它是怎么来表示这么些汉字字符的呢？由于使用到了7位双字节，我们知道7位可表示的字符编码数为128个，将这两个字节可表示的字符编码分别作为二维坐标系的横纵坐标轴，那我们就可以看到一个可以容纳128×128=16384个字符编码的平面。当然实际可存储的数量没有这么多，要排除掉ASCII中的控制字符0～31，空格符32，删除符127，剩下的也就只有94位，所以GB2312使用94×94的区位码来表示字符。</p><p>除了区位码，还有一个概念叫国标码，GB2312中字符的国标码等于十进制区位码分别加上32，具体为什么是32，猜测是想保留ASCII中的32个控制符，只是这样还是没有与ASCII兼容，所以又有机内码的概念，机内码=十六进制国标码+8080H，即两个字节各自加上80H，相当于偏移128个字符编码的位置，我们知道ASCII可表示的字符只有128位，这样就能实现完全兼容ASCII编码了，解码的时候也很容易判断，因为ASCII编码最高位为0，而GB2312偏移后所有编码最高位为1，如此便能完美区分开来。</p><h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><p>当我们在windows记事本程序中编辑完一篇文档并保存时可以设置该文档的编码，列出的编码格式中有一种叫ANSI，这是什么东西？<strong>严格来说ANSI并非是一种字符编码集，它在不同语言的windows系统中表示为不同的字符编码集，只存在于windows操作系统上</strong>，并且以windows code page所指定的值来决定它具体表示哪种字符编码集，如在简体中文系统下，windows code page的值为936，对应的编码是GBK（扩展于GB2312字符编码），而在繁体中文系统下，code page值为950，对应Big-5编码。</p><h3 id="Unicode统一码"><a href="#Unicode统一码" class="headerlink" title="Unicode统一码"></a>Unicode统一码</h3><p>有了中文编码，现在已经可以在计算机上处理和传输中文字符了，可是问题还没完，GB2312编码只能保证部分中英文字符可以得到有效处理，如果再涉及到一些其他国家的语言，GB2312就有些无能为力，这时候就该Unicode出场了。</p><blockquote><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。</p></blockquote><p>Unicode使用2个字节来存储字符编码，也叫作UCS-2，考虑到以后2个字节可能不够用，所以还有一个UCS-4，即使用4个字节表示一个字符。</p><p>这里需要注意的是Unicode只是一种编码方案，它规定的只是每个字符对应的二进制编码，<strong>至于这些编码在具体的计算机系统中要如何去存储，则由具体字符编码集实现</strong>。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8就是Unicode的一种具体实现，它怎么存储Unicode字符编码？</p><p>以汉字“中”举例，它对应的Unicode编码为4E2D，二进制表示为01001110 00101101，在UTF-8中存储为 11100100 10111000  10101101，十六进制E4B8AD，可以看到原本的Unicode编码占用了两个字节的长度，但在UTF-8编码中存储时却用到了3个字节，为什么？还是那个原因，为了兼容ASCII编码。我们知道ASCII编码是使用一个字节来存储字符编码的，并且最高位为0，因此<strong>UTF-8采用了可变长度字符编码存储方式</strong>，规则如下：</p><p>单字节字符，字节第一位设为0，与ASCII编码完全保持一致。</p><p>多字节字符，假设字符会占用n个字节，需要将第一个字节的前n位设为1，紧接着的一位设为0，其余字节前两位皆要设为10，而后所有字节剩下的空位用来依次存放字符的Unicode编码，高位用0补足。</p><p>例如上面提到的“中”的UTF-8编码为11100100 10111000  10101101，因为这个字符占用3个字节，所以第一个字节前3位为1，第四位则为0，随后第二个字节与第三个字节都以10开头，即1110XXXX 10XXXXXX 10XXXXX。“中”的Unicode编码为01001110 00101101，去除掉高位的0后，一共15位，而存储位置有16位，因此我们将最高位设为0，即11100XXX 10XXXXXX 10XXXXXX，将Unicode编码依次放入，就可以得到最终的UTF-8编码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是编码&quot;&gt;&lt;a href=&quot;#什么是编码&quot; class=&quot;headerlink&quot; title=&quot;什么是编码&quot;&gt;&lt;/a&gt;什么是编码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编码是信息从一种形式或格式转换为另一种形式的过程；解码则是编码的逆过程。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经验" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>从Integer和int看基本数据类型和包装类</title>
    <link href="https://evan-hon.netlify.app/2764528646.html"/>
    <id>https://evan-hon.netlify.app/2764528646.html</id>
    <published>2020-03-13T08:41:23.000Z</published>
    <updated>2021-08-05T07:25:34.514Z</updated>
    
    <content type="html"><![CDATA[<p>有关于基本数据类型和其包装类的关系，以及自动拆箱与装箱等。<br><a id="more"></a></p><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><ol><li><p>Integer 是 int 包装类，int 是八大基本数据类型之一（byte,char,short,int,long,float,double,boolean）</p></li><li><p>Integer 是类，默认值为null，int是基本数据类型，默认值为0；</p></li><li><p>Integer 表示的是对象，用一个引用指向这个对象，而int是基本数据类型，直接存储数值。</p></li></ol><h3 id="自动拆箱和装箱"><a href="#自动拆箱和装箱" class="headerlink" title="自动拆箱和装箱"></a>自动拆箱和装箱</h3><p>自动拆箱和自动装箱是 JDK1.5 以后才有的功能，也就是java当中众多的语法糖之一，它的执行是在编译期，会根据代码的语法，在生成class文件的时候，决定是否进行拆箱和装箱动作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    Integer i = <span class="number">10</span>;</span><br><span class="line">    Integer j = <span class="number">10</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(i == j);<span class="comment">//true</span></span><br><span class="line">      </span><br><span class="line">    Integer a = <span class="number">128</span>;</span><br><span class="line">    Integer b = <span class="number">128</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(a == b);<span class="comment">//false</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">10</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(k == i);<span class="comment">//true</span></span><br><span class="line">    <span class="keyword">int</span> kk = <span class="number">128</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(kk == a);<span class="comment">//true</span></span><br><span class="line">      </span><br><span class="line">    Integer m = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">    Integer n = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(m == n);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>反编译后<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static void main(String args[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">Integer</span> i = <span class="keyword">Integer</span>.valueOf(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">Integer</span> j = <span class="keyword">Integer</span>.valueOf(<span class="number">10</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(i == j);</span><br><span class="line">    <span class="keyword">Integer</span> a = <span class="keyword">Integer</span>.valueOf(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">Integer</span> b = <span class="keyword">Integer</span>.valueOf(<span class="number">128</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(a == b);</span><br><span class="line">    <span class="built_in">int</span> k = <span class="number">10</span>;</span><br><span class="line">    System.<span class="keyword">out</span>.println(k == i.intValue());</span><br><span class="line">    <span class="built_in">int</span> kk = <span class="number">128</span>;</span><br><span class="line">    System.<span class="keyword">out</span>.println(kk == a.intValue());</span><br><span class="line">    <span class="keyword">Integer</span> m = new <span class="keyword">Integer</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">Integer</span> n = new <span class="keyword">Integer</span>(<span class="number">10</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(m == n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PS:  </p><ol><li>基本数据类型用“==”比较的是值，引用类型比较的是内存地址（引用类型若要比较值需用equals）。  </li><li>在 Java 8 中，Integer 缓存池的大小默认为 -128~127，编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。</li><li>Integer对象与int变量用“==”比较时，Integer对象会自动拆箱。  </li><li>在函数中以new关键字创建的对象会保存到堆中，指向该对象的引用变量则是保存在堆桟里，每一次new都会创建一个新的对象。  </li><li>通常基本数据类型变量都保存在堆桟中，但若是将基本数据类型变量声明在成员变量区域处，该变量仍旧会保存到堆中。（有什么办法可以验证？）  </li><li>算术运算会使Integer对象触发自动拆箱。  </li><li><p>“==”运算符能将隐含的将小范围的数据类型转换为大范围的数据类型</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;</span><br><span class="line">Integer b = <span class="number">2</span>;</span><br><span class="line">Long g = <span class="number">3L</span>;</span><br><span class="line">Long h = <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(g == (a+b));<span class="comment">//true </span></span><br><span class="line"><span class="comment">//反编译后 System.out.println(g.longValue()==(long)(a.intValue()+b.intValue()))</span></span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(g.<span class="keyword">equals</span>(a+b));<span class="comment">//false</span></span><br><span class="line">System.<span class="keyword">out</span>.println(g.<span class="keyword">equals</span>(a+h));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>equals运算符会自动装箱，但不会进行类型转换。  </p></li><li>运算符+会进行类型转换。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>Integer缓存池里是在初始化时就把默认大小-128~127的Integer对象创建出来还是在程序中第一次声明后再放到缓存池里的？</li></ol><h3 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h3><ol><li>了解使用运算符进行运算操作时操作数会自动进行何种类型转换。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关于基本数据类型和其包装类的关系，以及自动拆箱与装箱等。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="Java" scheme="https://evan-hon.netlify.app/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式和方法引用</title>
    <link href="https://evan-hon.netlify.app/2078135551.html"/>
    <id>https://evan-hon.netlify.app/2078135551.html</id>
    <published>2020-03-13T08:33:05.000Z</published>
    <updated>2021-08-05T07:25:34.513Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。<br>使用 Lambda 表达式可以使代码变的更加简洁紧凑。<br><a id="more"></a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">parameters</span>) -&gt;</span> expression</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">(<span class="function"><span class="title">parameters</span>) -&gt;</span>&#123; statements; &#125;</span><br></pre></td></tr></table></figure><h3 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h3><p>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。<br>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。<br>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。<br>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</p><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaRelevant</span> </span>&#123;</span><br><span class="line">    <span class="comment">//static String n="evan";</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MathOperation addition= Integer::sum;<span class="comment">//此处用到了Java8新特性“方法引用”</span></span><br><span class="line">        <span class="comment">//等价于MathOperation addition=(int a,int b)-&gt;a+b;</span></span><br><span class="line"></span><br><span class="line">        MathOperation subtraction=(<span class="keyword">int</span> a,<span class="keyword">int</span> b)-&gt;a-b;</span><br><span class="line"></span><br><span class="line">        MathOperation multiplication=(a,b)-&gt;&#123;<span class="keyword">return</span> a*b;&#125;;</span><br><span class="line"></span><br><span class="line">        MathOperation division=(a,b)-&gt;a/b;</span><br><span class="line"></span><br><span class="line">        String n=<span class="string">"evan"</span>;</span><br><span class="line">        GreetingService greetingService = msg -&gt; &#123;</span><br><span class="line">            <span class="comment">//n="Leo";</span></span><br><span class="line">            <span class="comment">//尝试修改外部变量值报错：Variable used in lambda expression should be final or effectively final</span></span><br><span class="line">            <span class="comment">//String n="Leo";</span></span><br><span class="line">            <span class="comment">// 报错：Variable 'n' is already defined in the scope</span></span><br><span class="line">            System.out.println(msg+<span class="string">" "</span>+n);&#125;;</span><br><span class="line"></span><br><span class="line">        LambdaRelevant lambdaRelevant = <span class="keyword">new</span> LambdaRelevant();</span><br><span class="line">        System.out.println(<span class="string">"1+1="</span>+lambdaRelevant.operation(<span class="number">1</span>,<span class="number">1</span>,addition));<span class="comment">//run result:1+1=2</span></span><br><span class="line">        System.out.println(<span class="string">"2-1="</span>+lambdaRelevant.operation(<span class="number">2</span>,<span class="number">1</span>,subtraction));<span class="comment">//run result:2-1=1</span></span><br><span class="line">        System.out.println(<span class="string">"2*1="</span>+lambdaRelevant.operation(<span class="number">2</span>,<span class="number">1</span>,multiplication));<span class="comment">//run result:2*1=2</span></span><br><span class="line">        System.out.println(<span class="string">"2/2="</span>+lambdaRelevant.operation(<span class="number">2</span>,<span class="number">2</span>,division));<span class="comment">//run result:2/2=1</span></span><br><span class="line">        greetingService.message(<span class="string">"Hello"</span>);<span class="comment">//run result:Hello evan</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//error:Incompatible parameter types in lambda expression: wrong number of parameters: expected 1 but found 0</span></span><br><span class="line">        <span class="comment">//GreetingService greetingService1 = ()-&gt;System.out.println("Hello");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//error:Multiple non-overriding abstract methods found in interface LambdaRelevant.TalkSerivce</span></span><br><span class="line">        <span class="comment">//TalkSerivce talkSerivce=msg-&gt;System.out.println("Hello "+msg);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MathOperation</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span></span>&#123;</span><br><span class="line">        <span class="comment">//抽象方法</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">message</span><span class="params">(String msg)</span></span>;</span><br><span class="line">        <span class="comment">//java.lang.Object中的方法不是抽象方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object <span class="keyword">var</span>)</span></span>;</span><br><span class="line">        <span class="comment">//default不是抽象方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is default method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//static不是抽象方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is static method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@FunctionalInterface</span></span><br><span class="line">    <span class="comment">//如果加上该注解，同样会报错：Multiple non-overriding abstract methods found in interface LambdaRelevant.TalkSerivce</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">TalkSerivce</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Whisper</span><span class="params">(String msg)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Loud</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,MathOperation mathOperation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用是Java8 的新特性。<br>我们知道，使用Lambda表达式可以极大地简化我们的代码，但有时候Lambda体中的功能已经有现成的方法实现了，这时我们可以直接使用方法引用，而不是重复地去实现该功能。</p><p>方法引用可以理解为Lambda表达式的另一种表现形式。</p><p>方法引用引用的方法的参数列表和返回值类型，必须和函数式接口中抽象方法的参数列表和返回值类型保持一致。</p><ol><li>构造器引用：Class::new</li><li>静态方法引用：Class::static_method</li><li>特定类的任意对象的方法引用：Class::method</li><li>特定对象的方法引用：instance::method</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>函数式接口（Functional Interface）,在这个接口里面只能有一个抽象方法,这种类型的接口也称为SAM接口，即Single Abstract Method interfaces。</li><li>关于@FunctionalInterface注解，Java 8为函数式接口引入了一个新注解@FunctionalInterface，主要用于编译级错误检查，加上该注解，当你写的接口不符合函数式接口定义的时候，编译器会报错。</li></ol><ul><li>该注解只能标记在”有且仅有一个抽象方法”的接口上。</li><li>JDK8接口中的静态方法和默认方法，都不算是抽象方法。</li><li>接口默认继承java.lang.Object，所以如果接口显示声明覆盖了Object中方法，那么 也不算抽象方法。<br>PS:该注解不是必须的，如果一个接口符合”函数式接口”定义，那么加不加该注解都没有影响。加上该注解能够更好地让编译器进行检查。如果编写的不是函数式接口，但是加上了@FunctionInterface，那么编译器会报错。</li></ul><ol start="3"><li>lambda 表达式只能引用标记了 final 的外层局部变量(final关键字可以省略)，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。(lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）)  </li><li>在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</li></ol><h3 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h3><ol><li>了解什么是JDK8接口中的默认方法。</li><li>了解forEach。</li><li>动手用代码尝试一下方法引用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。&lt;br&gt;Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。&lt;br&gt;使用 Lambda 表达式可以使代码变的更加简洁紧凑。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="Java" scheme="https://evan-hon.netlify.app/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo报错记录</title>
    <link href="https://evan-hon.netlify.app/1545051317.html"/>
    <id>https://evan-hon.netlify.app/1545051317.html</id>
    <published>2020-03-13T06:44:32.000Z</published>
    <updated>2021-08-05T07:25:34.511Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo日常使用报错记录笔记<br><a id="more"></a></p><h2 id="TypeError-Cannot-set-property-‘lastIndex’-of-undefined"><a href="#TypeError-Cannot-set-property-‘lastIndex’-of-undefined" class="headerlink" title="TypeError: Cannot set property ‘lastIndex’ of undefined"></a>TypeError: Cannot set property ‘lastIndex’ of undefined</h2><p><strong>日期：</strong>2020年03月13日</p><p><strong>解决办法：</strong></p><ol><li>将Hexo配置文件_config.yml中highlight配置项下的auto_detect设置为false。</li><li>检查_post文件夹下发布的文章里代码区域是否指定了语言，例如：<img src="/1545051317/代码区域指定语言.png">若发现有这样的情况，将指定的语言（如图中的Java）去掉即可。</li></ol><p><strong>原因推断：</strong>可能是在代码区域指定语言会与Hexo配置项冲突，如果指定了语言就应把auto_detect置为false，从字面意思推断，在没有指定语言的情况下Hexo会自动识别代码所属。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo日常使用报错记录笔记&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="报错" scheme="https://evan-hon.netlify.app/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>观《泰坦尼克号》有感</title>
    <link href="https://evan-hon.netlify.app/1782071401.html"/>
    <id>https://evan-hon.netlify.app/1782071401.html</id>
    <published>2020-03-12T13:50:33.000Z</published>
    <updated>2021-08-05T07:25:34.510Z</updated>
    
    <content type="html"><![CDATA[<p>已经不是第一次看《泰坦尼克号》了，记得第一次看还是在高中时期，当时总是听身边的人说这部电影如何如何，甚至有一次老师在课堂上也提到过，于是在心中好奇的驱使下去看了，当时只觉得电影拍得很真实，令人震撼，特别是沉船的镜头，还有就是剧中讲述的爱情故事，让人羡慕神往，如今时过境迁，再次同泰坦尼克号踏上这段惊心动魄的旅程，心中所思所想，却又有了变化。<br><a id="more"></a></p><p>由于再次看这部剧时正值疫情爆发期间，人心惶惶，整日躲在家中，网上铺天盖地或真或假的消息，所以在看到电影中的一个场景时，心中感触更甚。泰坦尼克号由于速度太快，遇到冰山时虽极力制动偏转方向，但仍旧不可避免的与冰山碰上了，一开始只有少数人知道情况的严重性，并且这部分人为了避免引起混乱，选择隐瞒实情。不知情的人们还有说有笑，捡起洒落在船板上的碎冰嬉戏玩闹，浑然不知一场灭顶之灾即将降临。莫名的心中有些悸动，此刻发生在我们身上的事情何其相似，我们没有处在重灾区，便自以为是地觉得自己所处的环境是安全的，虽然每天也在关注疫情，但心中却没有多少紧迫，因为打心底还是觉得这一切离自己太远。</p><p>再有，当船长下达女人和孩子先行乘坐救生艇逃生后，许许多多的人围在救生艇旁，拼命想挤上船，因为那是唯一生的希望。求生是生命的本能，这无可厚非，但不得不说，仍旧有人在这样面对生死抉择的处境时保存着道德礼仪，看到这里的时候我就在想，若当时自己就在船上，会怎么去做？随后又觉得，在没有真正面对那般绝望的情景，光靠想象是无法预测的，或许自己会和大部分人一样，像一只无头苍蝇一样，没命往船上挤，又或许自己会默默待在一个角落，等待着死亡的降临，之所以会出现后一种情况，并非自己品格有多高尚，我一向觉得，许多后世所歌颂的先人们视死如归的壮举，是他们平日里潜移默化的价值观再加上遇到事情推进到某一刻，心中喷涌而出的情绪催化所致，他们也怕死，但有时候就是这样，把心一横，热血上涌，许多决定就在这样的情况下出现了。不过对于泰坦尼克号上一直在慌乱的人群中拉小提琴的几个人，我却是打心底里敬仰，在明知船快要沉没时，仍然在发出微弱的声音，希望可以缓和人们心中的急躁、恐惧和绝望，或许他们就是所谓的圣人吧，我是绝对做不到的，这一点我很肯定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经不是第一次看《泰坦尼克号》了，记得第一次看还是在高中时期，当时总是听身边的人说这部电影如何如何，甚至有一次老师在课堂上也提到过，于是在心中好奇的驱使下去看了，当时只觉得电影拍得很真实，令人震撼，特别是沉船的镜头，还有就是剧中讲述的爱情故事，让人羡慕神往，如今时过境迁，再次同泰坦尼克号踏上这段惊心动魄的旅程，心中所思所想，却又有了变化。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经历" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>如果有一天，生命进入倒计时</title>
    <link href="https://evan-hon.netlify.app/245441663.html"/>
    <id>https://evan-hon.netlify.app/245441663.html</id>
    <published>2019-07-10T05:34:09.000Z</published>
    <updated>2021-08-05T07:25:34.507Z</updated>
    
    <content type="html"><![CDATA[<p>如果有一天，生命进入倒计时，是否会沉静下来，回忆过往的一生？是否会为曾经而遗憾，为这世界而不舍？自己会是万念俱灰，或是坦然面对？<br><a id="more"></a></p><img src="/245441663/linlin.jpg"><p>那会是怎样一幅场景，我从不曾想过。生命的存在让人变得理所应当，我们总是<br>牺牲着自身的健康，挤压着与家人相处的时间，对未来的一切做着规划，想着现在的缺失将来都会得到弥补，只要未来按着我们的计划进行，可是未来和意外哪一个会先降临呢？自己想得到的是什么？生命存在的意义？</p><p>琳琳，祝好！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有一天，生命进入倒计时，是否会沉静下来，回忆过往的一生？是否会为曾经而遗憾，为这世界而不舍？自己会是万念俱灰，或是坦然面对？&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经历" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>读《三体》有感</title>
    <link href="https://evan-hon.netlify.app/3489101960.html"/>
    <id>https://evan-hon.netlify.app/3489101960.html</id>
    <published>2019-06-20T01:31:29.000Z</published>
    <updated>2021-08-05T07:25:34.505Z</updated>
    
    <content type="html"><![CDATA[<p>终于毕业答辩结束，拍了毕业照，参加了毕业聚会，谈不上不舍，但也确实是对大学这段时光有所留恋，希望我的小伙伴们今后都可以顺顺利利地走过每一段路…<br><a id="more"></a><br>凌晨一点多，从睡眠中醒来，酒后脑袋仍有点不适，不过已经没有什么睡意了，于是借着这段空闲时间，看完了之前一直在看的《三体》，感触颇多。</p><p>首先不得不佩服这本书的作者，思维之跳跃与知识之底蕴以及对人性的把控，有时候看着书里字里行间的文字，我总是不禁在想，他的脑海中究竟存在着怎样的一个世界，究竟需要怎样的格局才能写出如此宏大的小说，以自己的见识甚至觉得完全无法去揣度。</p><p>在阅读这本书的时候，总是为那些有如神迹的科学技术所着迷，三体人在恶劣的生存环境下谋求生机，以自身特殊的生理构造将文明一代代传承，并依靠科技力量走向宇宙。智子的出现让我第一次在阅读这本书的时候体会到震感，高维物体质子在低维二维平面展开变成了一张可以覆盖整个行星的画布，三体人在画布上蚀刻集成电路，最后又让这张画布收缩到高维状态，重新变成一个质子，这个质子由于内部集成电路，有了一定的智能，所以又叫做智子。</p><p>智子的出现是为了锁死人类基础物理的发展，在这个层面上很难用道德的观念去评判对与错，在宇宙中，生存似乎成了最基本的准则。当三体人通过智子在人视网膜上投下”你们是虫子”时，心中有着深深的无力感。人类要如何与这样一个文明对抗。</p><p>有几个人给我印象很是深刻，章北海，罗辑，维德，程心，云天明。在面临三体文明入侵时，罗辑几乎一力挑起了拯救人类命运的重担，他是人类选出的面壁者之一，也是三体文明唯一一次发出通缉指定必须杀掉的人。最初他只是借助面壁者的权利做着一些使得自己生活更好的事，无法判定他做的这一切是否是计划中的一部分，或者说不得而知如果后边没有庄颜的出现他是否会有不一样的决定。一开始我是肯定的，但看到后边：</p><blockquote><p>罗辑盘腿端坐在白色大厅正中，面对着那堵弧形白墙，他的头发和胡须都很长，但不乱，梳理得很整齐，也都是纯白色，几乎与白墙融为一体，这使得他穿的整洁的黑色中山装格外醒目。他端坐在那里，呈一个稳定的倒丁字形，仿佛是海滩上一只孤独的铁锚，任岁月之风从头项吹过，任时间之浪在面前咆哮，巍然不动，以不可思议的坚定等待着一艘永不归航的船。他的右手握着一个红色的条状物，那就是执剑者的剑柄——引力波广播的启动开关。他的存在使这个空眼球有了眸子，虽然与大厅相比只是一个黑点，却使荒凉和茫然消失了，眼睛有了神。而罗辑本人的眼睛从这个方向是看不到的，他对来人丝毫没有反应，只是盯着面前的白墙。<br>…<br>罗辑就是以这种目光逼视着那堵白墙，逼视着那个四光年外的世界。他知道智子使得敌人能看到自己的目光，这目光带着地狱的寒气和巨石的沉重，带着牺牲一切的决绝，令敌人心悸，使他们打消一切轻率的举动。</p></blockquote><p>他的决绝又让我有些犹豫起来，或许即使没有庄颜，他也会承担起这份责任。他直面三体世界作最后决断的场景令我钦佩：</p><blockquote><p>罗辑艰难地站了起来，在虚弱的颤抖中，他只有扶着墓碑才能站住。他腾出一只手来，整理了一下自己满是泥浆的湿衣服和蓬乱的头发，随后摸索着，从上衣口袋中掏出一个金属管状物，那是一支已经充满电的手枪。<br>然后，他面对着东方的晨光，开始了地球文明和三体文明的最后对决。</p><p>“我对三体世界说话。”罗辑说，声音并不高，他本想重复一遍，但是没有，他知道对方能听到。<br>……<br>这个仍未醒来的世界，不知道自己已被当做一场豪赌的筹码，放到了宇宙的赌桌上。<br>罗辑抬起左手，露出了戴在手腕上的手表大小的东西说：“这是一个生命体征监测仪，它通过一个发射器与一套摇篮系统联结。你们一定记得两个世纪前面壁者雷迪亚兹的事，那就一定知道摇篮系统是什么。这个监测仪所发出的信号通过摇篮系统的链路，到达雪地工程部署在太阳轨道上的三千六百一十四枚核弹，信号每秒钟发射一次，维持着这些核弹的非触发状态。如果我死去，摇篮系统的维持信号将消失，所有的核弹将被引爆，包裹核弹的油膜物质将在爆炸中形成围绕太阳的三千六百一十四团星际尘埃，从远方观察，在这些尘埃云团的遮挡下，太阳将在可见光和其他高频波段发生闪烁。太阳轨道上所有核弹的位置都是经过精心布置的，这将使得太阳闪烁形成的信号发送出三张简单的图形，就像我两个世纪前发出的那三张图一样，每张上面有三十个点的排列，并标注其中一个点，它们可以组合成一张三维坐标图。但与那次不同的是，这次发送的，是三体世界与周围三十颗恒星的相对位置。太阳将变成银河系中的一座灯塔，把这咒语发送出去，当然，太阳系和地球的位置也会同时暴露。从银河系中的一点看，图形发射完成需要一年多的时间，但应该有很多技术发展到这样程度的文明，可以从多个方向同时观测太阳，那样的话，只需几天甚至几个小时，他们就能得到全部信息。”<br>……<br>罗辑离开墓碑，站到他为自己挖掘的墓穴旁，将手枪顶到自己的心脏位置，说：“现在，我将让自己的心脏停止跳动，与此同时我也将成为两个世界有史以来最大的罪犯。对于所犯下的罪行，我对两个文明表示深深的歉意，但不会忏悔，因为这是唯一的选择。我知道智子就在身边，但你们对人类的呼唤从不理睬，无言是最大的轻蔑，我们忍受这种轻蔑已经两个世纪了，现在，如果你们愿意，可以继续保持沉默，我只给你们三十秒钟时间。”</p></blockquote><p>罗辑以黑暗森林法则建立起了对三体文明的威慑，并且成为了第一任执剑人。作为一名执剑人，无疑罗辑是成功的，三体人曾评价：</p><blockquote><p>智子把长刀向后一扬，准确地插入背上的鞘中，“我要走了，请代我向罗辑博士表达三体世界的敬意，他是一个强大的威慑者，伟大的战士。另外，如果有机会，也请向托马斯·维德先生表示遗憾。”<br>……<br>“知道吗？在我们的人格分析系统中，你的威慑度在百分之十上下波动，像一条爬行的小蚯蚓；罗辑的威慑度曲线像一条凶猛的眼镜蛇，在百分之九十高度波动；而维德……”智子遥望着烟尘后面落得只剩一角的夕阳，眼中透出明显的恐惧，然后用力摇摇头，仿佛正努力从自己的脑子中赶走什么，“他根本没有曲线，在所有外部环境参数下，他的威慑度全顶在百分之一百，那个魔鬼！如果他成为执剑者，这一切都不会发生，和平将继续，我们已经等了六十二年，都不得不继续等下去，也许再等半个世纪或更长。那时，三体世界只能同在实力上已经势均力敌的地球文明战斗，或妥协……”</p></blockquote><p>三体人提到了另一个人，维德，他和章北海应该算是同一类人，目的驱动，为了达到目的，可以不择手段，甚至不惜让自己堕入无边地狱。维德的行事风格可以说很疯狂，他一直在说着：“前进，前进……”，他曾做出把云天明的大脑冷冻后发射往三体世界的决定。</p><p>至于程心，这是一个很赋有争议的人物，她的善良与爱让人又爱又恨，其实她确实是最无辜的一个人，她并没有做什么，只是人类选择了她，在冰冷的宇宙法则与爱之间，人类选择了爱，三体人曾评价说，她是一个童话，可宇宙中没有童话，从开始到结束，她就是她，一直没有变过，可以说，这一切自从决定她为决策者开始就已经注定，不过有时我也曾想过，人类作为这样一个有爱的特殊群体，是否可以改变宇宙的现状，是否可以有一个不一样的结局。</p><p>三体死神永生展示了宇宙中存在的黑暗，高级文明对同一纬度的其它文明实施黑暗森林打击，手段包括粒子攻击、降维打击等以宇宙规律为武器的攻击手段。降维打击最终会致使这一维度在宏观层面消失，而这一维度的部分打击者会改造自身的生命形态进入低维空间生存。</p><p>宇宙其实很拥挤，存在着无数文明，他们之间相互忌惮，一旦得知具体位置坐标，就实施黑暗森林打击，如果这一切是真实存在的，想想就不寒而栗……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于毕业答辩结束，拍了毕业照，参加了毕业聚会，谈不上不舍，但也确实是对大学这段时光有所留恋，希望我的小伙伴们今后都可以顺顺利利地走过每一段路…&lt;br&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://evan-hon.netlify.app/categories/read/"/>
    
    
      <category term="小说" scheme="https://evan-hon.netlify.app/tags/novel/"/>
    
  </entry>
  
  <entry>
    <title>一次意外的趣味算法问题</title>
    <link href="https://evan-hon.netlify.app/744267713.html"/>
    <id>https://evan-hon.netlify.app/744267713.html</id>
    <published>2019-06-04T10:26:11.000Z</published>
    <updated>2021-08-05T07:25:34.500Z</updated>
    
    <content type="html"><![CDATA[<p>深夜时分，收到朋友来信，说是有一道趣味算法问题，希望可以在实现后交流一下心得。唔，其实我是很抵制大半夜还做这种不利于自己头发的事的，不过最终还是没能避免熬夜的命运……<br><a id="more"></a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题大概是这样的，有如下图所示这样一个六角星，同时现在有1-12这样几个数字，要求将这12个数字分别不重复地放在这个六角星所有线条的交点上，并且使每条线的和相等。<br><img src="/744267713/six-star1.jpg"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>既然是打算用计算机来解决问题，自然首先得考虑到计算机的优势——运算速度快，计算机可以通过穷举所有可能得出结果，12个数字不重复放到12个点上，首先得规定这些点在计算机中应该如何表示。<br><img src="/744267713/six-star2.jpg"><br>在这里我的想法是将外圈上的点和内圈的点分用两个数组表示，以外圈某一点为起点顺时针或逆时针将点依次放入数组1,再以同样的方式把内圈的点放入数组2。随后计算机生成1-12的6位全排列，遍历全排列把结果放入数组1作为外圈点上的数字，并且在每一次遍历后再以1-12里剩下的数生成全排列，作为数组2遍历的对象，如此便可以根据一条线上四个点和相等的条件确定结果。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">iter1 = itertools.permutations(list1,<span class="number">6</span>)</span><br><span class="line">list2=list(iter1)</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> list2:</span><br><span class="line">  l=list1[:]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="selector-tag">i</span>:</span><br><span class="line">    l.remove(j)</span><br><span class="line">  </span><br><span class="line">  iter2 = itertools.permutations(l,<span class="number">6</span>)</span><br><span class="line">  in_nums=list(iter2)</span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> in_nums:</span><br><span class="line">    ac=<span class="selector-tag">i</span>[<span class="number">0</span>]+<span class="selector-tag">i</span>[<span class="number">2</span>]+k[<span class="number">1</span>]+k[<span class="number">2</span>]</span><br><span class="line">    ae=<span class="selector-tag">i</span>[<span class="number">0</span>]+<span class="selector-tag">i</span>[<span class="number">4</span>]+k[<span class="number">0</span>]+k[<span class="number">5</span>]</span><br><span class="line">    bf=<span class="selector-tag">i</span>[<span class="number">1</span>]+<span class="selector-tag">i</span>[<span class="number">5</span>]+k[<span class="number">0</span>]+k[<span class="number">1</span>]</span><br><span class="line">    bd=<span class="selector-tag">i</span>[<span class="number">1</span>]+<span class="selector-tag">i</span>[<span class="number">3</span>]+k[<span class="number">2</span>]+k[<span class="number">3</span>]</span><br><span class="line">    ce=<span class="selector-tag">i</span>[<span class="number">2</span>]+<span class="selector-tag">i</span>[<span class="number">4</span>]+k[<span class="number">3</span>]+k[<span class="number">4</span>]</span><br><span class="line">    df=<span class="selector-tag">i</span>[<span class="number">3</span>]+<span class="selector-tag">i</span>[<span class="number">5</span>]+k[<span class="number">4</span>]+k[<span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ac==ae==bf==bd==ce==df:</span><br><span class="line">      print(<span class="string">'result:'</span>)</span><br><span class="line">      print(i+k)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深夜时分，收到朋友来信，说是有一道趣味算法问题，希望可以在实现后交流一下心得。唔，其实我是很抵制大半夜还做这种不利于自己头发的事的，不过最终还是没能避免熬夜的命运……&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="算法" scheme="https://evan-hon.netlify.app/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Linux使用笔记（Manjaro DDE）</title>
    <link href="https://evan-hon.netlify.app/4216128804.html"/>
    <id>https://evan-hon.netlify.app/4216128804.html</id>
    <published>2019-05-07T05:08:39.000Z</published>
    <updated>2021-08-05T07:25:34.499Z</updated>
    
    <content type="html"><![CDATA[<p>Linux发行版实在是太多了，之前尝试过了Ubuntu、CentOS、Debian等等许多的发行版，用过了KDE、Xfce等一些桌面环境，感觉都不是很适合自己，之后了解到Deepin这个发行版，得知是国人精心打造的产物，而且桌面环境做得超赞，有心使用，但可能是自己的电脑是ATI+Intel双显卡的原因，导致该发行版安装后卡在桌面，试过网上的一些办法，都没什么效果，只得暂时放下转而选择先体验Manjaro DDE 发行版。<br><a id="more"></a></p><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><p>设备：Lenovo XIAOXIN V4000<br>显卡：AMD &amp; Intel<br>CPU：Intel core i7<br>系统：Manjaro 18.0.4 Illyria<br>DE：Deepin 15.10</p><h3 id="双显卡问题"><a href="#双显卡问题" class="headerlink" title="双显卡问题"></a>双显卡问题</h3><h4 id="NVIDIA-（由于电脑是ATI显卡-所以暂未尝试）"><a href="#NVIDIA-（由于电脑是ATI显卡-所以暂未尝试）" class="headerlink" title="NVIDIA （由于电脑是ATI显卡 所以暂未尝试）"></a>NVIDIA （由于电脑是ATI显卡 所以暂未尝试）</h4><ol><li>bumblebee    </li><li>Nvidia Prime</li></ol><h4 id="AMD-ATI"><a href="#AMD-ATI" class="headerlink" title="AMD/ATI"></a>AMD/ATI</h4><p>闭源驱动：安装官方提供的闭源驱动</p><p>开源驱动：<br><code>sudo cat /sys/kernel/debug/vgaswitcheroo/switch  # 查看切换状态        DIS独显     IGD集显</code></p><p>如果文件不存在，可能存在的问题：</p><ol><li>闭源驱动卸载未卸载(不彻底)</li><li>内核不支持/未启用VGA_SWITCHEROO</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">xrandr </span><span class="built_in">--listproviders</span>            <span class="comment"># 使用xrandr显示可支持的显卡</span></span><br><span class="line"></span><br><span class="line"><span class="string">xrandr </span><span class="built_in">--setprovideroffloadsink</span> 1 0  <span class="comment"># 设置此处后可以使用DRI_PRIME为某个应用选择使用哪张显卡</span></span><br><span class="line"></span><br><span class="line"><span class="string">glxinfo </span>| <span class="string">grep </span><span class="string">"OpenGL renderer"</span>      <span class="comment"># 查看正在使用的显卡</span></span><br><span class="line"></span><br><span class="line"><span class="string">DRI_PRIME=</span>1 <span class="string">glxinfo </span>| <span class="string">grep </span><span class="string">"OpenGL renderer"</span>  <span class="comment"># 加上DRI_PRIME=1参数  为glxinfo启用独显</span></span><br></pre></td></tr></table></figure><h3 id="应用不支持fcitx中文输入法（可尝试）"><a href="#应用不支持fcitx中文输入法（可尝试）" class="headerlink" title="应用不支持fcitx中文输入法（可尝试）"></a>应用不支持fcitx中文输入法（可尝试）</h3><p>打开对应命令文件，如 /usr/bin/wps<br>头部加入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=<span class="string">"@im=fcitx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=<span class="string">"fcitx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=<span class="string">"fcitx"</span></span><br></pre></td></tr></table></figure></p><h3 id="EFI"><a href="#EFI" class="headerlink" title="EFI"></a>EFI</h3><p>GPT+EFI 多次重复安装Linux不同发行版 导致 EFI多出来很多启动项</p><p>解决方案：</p><ol><li>efibootmgr</li><li>直接挂载UEFI分区 删除启动项对应文件夹 (没尝试过…)</li></ol><h3 id="SS-SSR代理"><a href="#SS-SSR代理" class="headerlink" title="SS/SSR代理"></a>SS/SSR代理</h3><ol><li>全局：直接在deepin DE网络中配置代理</li><li>终端：<br><code>export http_proxy=&quot;http://127.0.0.1:12333&quot;    #     or   https_proxy</code></li></ol><h3 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h3><p>tar是Linux下最常用打包程序</p><ol><li>基本用法</li><li>tar调用 (tar在打包的同时提供调用其他压缩程序的功能)，如<code>tar -xzf xxx.gzip  #  -z参数代表指定调用gzip压缩程序</code> </li></ol><h3 id="启动器图标"><a href="#启动器图标" class="headerlink" title="启动器图标"></a>启动器图标</h3><p>这两个路径下可以编辑</p><ol><li>/home/evan/.local/share/applications</li><li>/usr/share/applications</li></ol><h3 id="Chrome-Flash插件"><a href="#Chrome-Flash插件" class="headerlink" title="Chrome Flash插件"></a>Chrome Flash插件</h3><p>chrome不同于firefox，在chrome中是自带flash插件的，当需要更新flash插件时，只需要在地址栏输入<code>chrome://components</code>，然后找到Adobe Flash Player插件，检查更新即可。正常情况下这样即可，不过我遇到一个问题，更新完flash插件后，打开需要flash的网页仍旧显示插件过期，并且点击升级插件会提示点击右键运行插件，不过按着提示操作后没有任何反应。尝试了很多方法后无果，几近放弃，不过无意间看见<code>~/.config/google-chrome/PepperFlash/32.0.0.192/libpepflashplayer.so</code>这个文件（即flash插件）没有可执行权限，抱着死马当活马医的态度，执行命令<code>chmod +x ~/.config/google-chrome/PepperFlash/32.0.0.192/libpepflashplayer.so</code>，赋予libpepflashplayer.so文件可执行权限，再次尝试……终于出来了。</p><h3 id="pacman安装的软件包版本回退"><a href="#pacman安装的软件包版本回退" class="headerlink" title="pacman安装的软件包版本回退"></a>pacman安装的软件包版本回退</h3><p>我们在使用系统的过程中难免会遇到这样的问题，升级软件包后出现了一些问题或者是自己更喜欢以前的版本，这时候我们便不得不将已安装的软件包进行版本回退。pacman通常会将它下载的软件包放在系统<code>/var/cache/pacman/pkg</code>路径下，一般情况下pacman是不会清理这部分文件的，除非自己手动执行<code>pacman -Sc</code>，这个命令会保留软件包的当前有效版本，旧版本的软件包会被清理掉。我们要进行软件包版本回退，首先得在这个路径下找到软件包的旧版本，如果找不到可以到网上一些镜像源里下载到本地。之后需要执行命令<code>sudo pacman -U xxx.pkg.tar.xz</code>安装本地软件包。为了防止下次软件更新时再次将软件包升级，可以到<code>/etc/pacman.conf</code>修改添加<code>IgnorePkg=xxx</code>。</p><h3 id="pacman常用命令"><a href="#pacman常用命令" class="headerlink" title="pacman常用命令"></a>pacman常用命令</h3><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>生成国内可用源列表：<br><code>$ sudo pacman-mirrors -i -c China -m rank</code><br>在弹出窗口中选择较快的源，让本地包数据库与远程软件仓库同步：<br><code>$ pacman -Syy   # 或者使用pacman -Syu同时进行同步软件库与更新系统到最新状态</code></p><h4 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h4><p>安装或者升级单个软件包，或者一列软件包（包含依赖包），使用如下命令：<br><code>pacman -S package_name1 package_name2</code><br>在不同的软件仓库中，一个软件包有多个版本（比如extra和testing）。可以选择一个来安装：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S extra/<span class="keyword">package</span><span class="number">_n</span>ame</span><br><span class="line">pacman -S testing/<span class="keyword">package</span><span class="number">_n</span>ame</span><br></pre></td></tr></table></figure></p><p>你也可以在一个命令里同步包数据库并且安装一个软件包：<br><code>pacman -Sy package_name</code></p><h4 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h4><p>删除单个软件包，保留其全部已经安装的依赖关系<br><code>pacman -R package_name</code><br>删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系：<br><code>pacman -Rs package_name</code></p><h4 id="包数据库查询"><a href="#包数据库查询" class="headerlink" title="包数据库查询"></a>包数据库查询</h4><p>可以使用 -Q 标志搜索和查询本地包数据库。详情参见<br><code>pacman -Q --help</code><br>可以使用-S 标志搜索和查询远程同步的包数据库。详情参见<br><code>pacman -S --help</code></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>下载包而不安装它：<br><code>pacman -Sw package_name</code><br>安装一个本地包（不从源里）：<br><code>pacman -U /path/to/package/package_name-version.pkg.tar.gz</code><br>完全清理包缓存(/var/cache/pacman/pkg)：<br><code>pacman -Scc</code></p><h3 id="Manjaro无法识别USB存储设备"><a href="#Manjaro无法识别USB存储设备" class="headerlink" title="Manjaro无法识别USB存储设备"></a>Manjaro无法识别USB存储设备</h3><p>现象描述：Manjaro系统无法识别UBS存储设备，包含U盘和移动硬盘<br>问题确认：<br>1、看能否正常载入USB存储模块<br><code>sudo modprobe usb-storage</code><br>返回结果为：<br><code>modprobe: FATAL: Module usb-storage not found in directory /lib/modules/4.19.45-1-MANJARO</code><br>可以看到无法找到需要加载的usb-storage。查询/lib/modules目录：<br><code>ls /lib/modules</code><br>返回内容为：<br><code>4.19.49-1-MANJARO  extramodules-4.19-MANJARO</code><br>发现主要问题是需要加载的版本和实际的版本不一致。初步定位是ArchLinux滚动更新版本带来的问题。</p><p>2、查看正在运营的版本和已安装的版本<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="selector-tag">uname</span> <span class="selector-tag">-r</span></span><br><span class="line"><span class="selector-tag">4</span><span class="selector-class">.19</span><span class="selector-class">.45-1-MANJARO</span></span><br><span class="line">➜  ~ <span class="selector-tag">pacman</span> <span class="selector-tag">-Q</span> <span class="selector-tag">linux</span></span><br><span class="line"><span class="selector-tag">linux419</span> <span class="selector-tag">4</span><span class="selector-class">.19</span><span class="selector-class">.49-1</span></span><br><span class="line">➜  ~ <span class="selector-tag">cat</span> /<span class="selector-tag">proc</span>/<span class="selector-tag">version</span></span><br><span class="line"><span class="selector-tag">Linux</span> <span class="selector-tag">version</span> <span class="selector-tag">4</span><span class="selector-class">.19</span><span class="selector-class">.45-1-MANJARO</span> (builduser<span class="variable">@development</span>) (gcc version <span class="number">8.3</span>.<span class="number">0</span> (GCC)) <span class="selector-id">#1</span> <span class="selector-tag">SMP</span> <span class="selector-tag">PREEMPT</span> <span class="selector-tag">Wed</span> <span class="selector-tag">May</span> <span class="selector-tag">22</span> <span class="selector-tag">17</span><span class="selector-pseudo">:16</span><span class="selector-pseudo">:41</span> <span class="selector-tag">UTC</span> <span class="selector-tag">2019</span></span><br></pre></td></tr></table></figure></p><p>同时可以到Manjaro的内核设置页面进一步确认运行版本</p><p>确实存在实际与描述不符的问题。</p><p>解决方案：更新启动引导程序并重启<br><code>sudo update-grub</code><br>最终，问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux发行版实在是太多了，之前尝试过了Ubuntu、CentOS、Debian等等许多的发行版，用过了KDE、Xfce等一些桌面环境，感觉都不是很适合自己，之后了解到Deepin这个发行版，得知是国人精心打造的产物，而且桌面环境做得超赞，有心使用，但可能是自己的电脑是ATI+Intel双显卡的原因，导致该发行版安装后卡在桌面，试过网上的一些办法，都没什么效果，只得暂时放下转而选择先体验Manjaro DDE 发行版。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经历" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
      <category term="Linux" scheme="https://evan-hon.netlify.app/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>前端框架与库收集记录</title>
    <link href="https://evan-hon.netlify.app/2364295358.html"/>
    <id>https://evan-hon.netlify.app/2364295358.html</id>
    <published>2019-04-23T13:10:25.000Z</published>
    <updated>2021-08-05T07:25:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发中收集记录下的实用框架与库…<br><a id="more"></a></p><h3 id><a href="#" class="headerlink" title></a><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a></h3><p>经典模块化前端框架,由职业前端倾情打造，面向所有层次的前后端开发者，零门槛开箱即用的前端UI解决方案。</p><h3 id="-1"><a href="#-1" class="headerlink" title></a><a href="http://x.xuebingsi.com/" target="_blank" rel="noopener">X-admin</a></h3><p>前端后台模板，完美极简体验，快速开发后台管理的解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发中收集记录下的实用框架与库…&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经历" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
      <category term="库" scheme="https://evan-hon.netlify.app/tags/library/"/>
    
      <category term="框架" scheme="https://evan-hon.netlify.app/tags/frame/"/>
    
  </entry>
  
  <entry>
    <title>好用工具软件记录</title>
    <link href="https://evan-hon.netlify.app/1041450376.html"/>
    <id>https://evan-hon.netlify.app/1041450376.html</id>
    <published>2019-04-23T05:22:01.000Z</published>
    <updated>2021-08-05T07:25:34.493Z</updated>
    
    <content type="html"><![CDATA[<p>平日里用到的一些不错的工具软件，记录于此…</p><a id="more"></a><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a><p>Rufus是一个实用工具，它帮助格式化和创建可引导的usb闪存驱动器</p><a href="https://www.disktool.cn/" target="_blank" rel="noopener">分区助手</a><p>分区助手是一款免费、专业级的无损分区工具，提供简单、易用的磁盘分区管理操作。</p><a href="https://ditto-cp.sourceforge.io/" target="_blank" rel="noopener">Ditto</a><p>Ditto 是一款强大的 Windows 剪贴板增强工具，它支持64位操作系统，而且完全免费，绿色开源，支持中文。</p><a href="https://www.teamviewer.com/cn/" target="_blank" rel="noopener">TeamViewer</a><p>TeamViewer是一个能在任何防火墙和NAT代理的后台用于远程控制的应用程序，桌面共享和文件传输的简单且快速的解决方案。为了连接到另一台计算机，只需要在两台计算机上同时运行 TeamViewer 即可。</p><a href="https://www.screentogif.com/" target="_blank" rel="noopener">ScreenToGif</a><p>该工具允许您记录屏幕上选定的区域、从网络摄像头实时输入的内容或从草图中实时绘制的绘图。之后，您可以编辑动画并将其保存为gif或视频。</p><a href="https://aria2.github.io/" target="_blank" rel="noopener">aria2</a><p>一个可以代替迅雷的下载工具。<br>aria2本身只提供了命令行的操作方式，这给使用带来了很大的不便，所以有了<a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">webui-aria2</a>，可视化操作aria2的web程序。</p><a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">BaiduPCS-Go</a><a href="https://github.com/proxyee-down-org/proxyee-down" target="_blank" rel="noopener">Proxyee Down</a><p>百度网盘第三方工具（可能遭到百度封锁，造成工具失效，不过可以参考源码学习它的技术）。</p><a href="https://github.com/darknessomi/musicbox" target="_blank" rel="noopener">musicbox</a><p>网易云音乐的命令行版本，虽然有时候会不稳定，但是如果感兴趣也是可以参考该项目的开源项目学习了解。</p><a href="https://www.snipaste.com/" target="_blank" rel="noopener">Snipaste</a><p>不只是截图，善用贴图功能将帮助你提升工作效率！</p><a href="https://v2ray.com/" target="_blank" rel="noopener">V2Ray</a><p>Project V 是一个工具集合，它可以帮助你打造专属的基础通信网络。Project V 的核心工具称为V2Ray，其主要负责网络协议和功能的实现，与其它 Project V 通信。V2Ray 可以单独运行，也可以和其它工具配合，以提供简便的操作流程。</p><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a><p>Sublime Text具有漂亮的用户界面和强大的功能，众多的插件，是一个跨平台的编辑器。<br>相应的插件：<br><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control</a><br>安装插件慢解决方案：</p><p>1.打开命令面板 Ctrl (Command)+Shift+p<br>2.找到并打开：Preferences: Package Control sublime Settings - User<br>3.添加一行”channels”属性（或者可以把这个文件下载到本地，填写对应的本地路径）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"channels"</span>:</span><br><span class="line">                [<span class="meta"></span></span><br><span class="line"><span class="meta">                    <span class="meta-string">"https://raw.githubusercontent.com/wilon/sublime/master/download/channel_v3.json"</span></span></span><br><span class="line"><span class="meta">                </span>]</span><br></pre></td></tr></table></figure><p>MarkdownEditing ：markdown语法高亮 </p><p>MarkdownPreview ：markdown预览<br>快捷键设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"keys"</span>: [<span class="string">"alt+m"</span>], <span class="attr">"command"</span>: <span class="string">"markdown_preview"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"target"</span>: <span class="string">"browser"</span>, <span class="attr">"parser"</span>:<span class="string">"markdown"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a><p>Notepad++是一种免费的、支持多种语言的代码编辑器，运行在windows环境下。</p><a href="http://www.dcloud.io/" target="_blank" rel="noopener">HBuilder</a><p>HBuilder是DCloud（数字天堂）推出的一款支持HTML5的Web开发IDE,用来进行前端代码编写很不错。</p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a><p>微软开发的一款开源代码编辑器。<br>Extension：<br>C/C++<br>需要配置三个文件（可以通过相应可视化操作生成）<br>c_cpp_properties.json ：to specify the compiler path<br>tasks.json ：to specify how to build the executable<br>launch.json：to specify debugger settings<br>文件模板：<br><a href="/1041450376/c_cpp_properties.json1" title="[c_cpp_properties.json]">[c_cpp_properties.json]</a><br><a href="/1041450376/tasks.json1" title="[tasks.json]">[tasks.json]</a><br><a href="/1041450376/launch.json1" title="[launch.json]">[launch.json]</a></p><p>使用过程中遇到的问题：<br>1.externalConsole:true 设置启用外部终端，但运行时没有反应（没有终端弹出）<br>解决方案：<br>（1）修改externalConsole:false，使用VSCode内置终端，可以正常运行<br>（2）在VSCode 设置中 修改 Terminal › External，指定不同平台下的终端</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a><p>java语言开发的集成环境（也可用于其他开发语言），IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等。</p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a><p>PyCharm是一种Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。</p><h3 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h3><a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">Apktool</a><p>Android App的逆向工程工具，它可以将资源解码成几乎原始的形式，并在做了一些修改后重新构建它们，如果想要查看安卓App里的资源文件，可以使用这个工具。</p><a href="http://java-decompiler.github.io/" target="_blank" rel="noopener">Java Decompiler</a><p>JD-GUI是一个独立的图形实用程序，它显示“.class”文件的Java源代码。</p><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">dex2jar</a><p>安卓逆向工具</p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a><p>开源虚拟机</p><a href="https://www.vmware.com/cn.html" target="_blank" rel="noopener">VMware</a><p>好用的虚拟机，付费软件。</p><h3 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h3><ol><li><p><strong>简悦 - SimpRead</strong><br>让你瞬间进入沉浸式阅读的 Chrome 扩展，类似 Safari 的阅读模式。</p></li><li><p><strong>有道云笔记网页剪报</strong><br>一键保存精彩网页，多终端同步，永久珍藏</p></li><li><p><strong>Mate Translate – 翻译器、词典</strong><br>一站式翻译您的网页、标记的文字段落和 Netflix 影集字幕。快速翻译和学习多达 103 种语言。</p></li><li><p><strong>AdGuard 广告拦截器</strong><br>一款无与伦比的广告拦截扩展，用以对抗各式广告与弹窗。可以拦截 Facebook、YouTube 和其它所有网站的广告。</p></li><li><p><strong>简 Tab</strong><br>极简的新标签页扩展，望你每次打开都有好心情。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平日里用到的一些不错的工具软件，记录于此…&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://evan-hon.netlify.app/categories/notes/"/>
    
    
      <category term="经历" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
      <category term="工具" scheme="https://evan-hon.netlify.app/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>平安好医生头条爬虫</title>
    <link href="https://evan-hon.netlify.app/2857045083.html"/>
    <id>https://evan-hon.netlify.app/2857045083.html</id>
    <published>2019-04-22T10:58:13.000Z</published>
    <updated>2021-08-05T07:25:34.482Z</updated>
    
    <content type="html"><![CDATA[<p>临近毕业，毕业设计自然是免不了的。我的课题是一个有关健康的App，需要编写爬虫收集有关健康的知识数据存入数据库，在网上找到了平安好医生这个网站，发现它的数据很适合我的项目，于是便开始着手编写爬虫…<br><a id="more"></a></p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>因为以前用python写过爬虫，爬过QQ空间好友动态和QQ音乐歌曲，所以一开始并没觉得此次编写爬虫会有什么难度，但当我打开开发者调试工具查看后才发现事实上并非如此。<br>链接：<a href="https://www.jk.cn/galaxy/index.html#/wap/search/result?keyword=%E5%BF%83%E8%84%8F%E7%97%85&tab=headinfo" target="_blank" rel="noopener">平安好医生</a></p><img src="/2857045083/screenshot_01.png"><p>首先确定页面中的数据是通过js动态加载的，直接获取网页源码解析的方法行不通。</p><p>考虑模拟js直接访问数据接口，获取网站后台返回的json数据。通过chrome开发者调试工具，XHR过滤，找到获取数据的请求，一看是通过POST方式提交的请求数据，而且数据中包含了一些不定的参数，心中凉了一截。</p><p>想到可能需要在请求参数中包含一些加密参数，以前没接触过这个网站，而且想着只是些不怎么重要的数据，网站方应该不会过多去阻拦，现实残酷，不过网站js加密，可以通过查看源码了解还原加密方式，理论上是一定可以解析出来，只不过是麻烦不麻烦的问题。怀着期待，点开initiator，定位到发起请求的js代码。</p><p>通常正式发布的网站js代码都会压缩混淆，这给我编写爬虫的工作带来了一定的困扰。使用pretty print格式化一下代码，而后通过断点、Call Stack、逐步运行等一系列调试操作，确定了js通过fetch发起请求前会把请求的参数拼接字符串，sort函数排序，再传入一系列的加密函数生成”_sig”参数内容。我….一开始尝试着根据js代码用python还原加密字符串加密过程，不过这过程太繁琐且曲折，再加上混淆后的js阅读实在太痛苦，几近让我放弃。</p><p>想着是否可以让python直接加载js代码运行，查阅资料后了解到python的确有类似的库(execjs)，需要nodejs环境，当然还有其它同样功能的库，效果一样。解决了最大的问题，爬虫的实现也就变得容易了，下面给出代码。</p><h3 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hs.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://api.jk.cn/m.api'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'api.jk.cn'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>:<span class="string">'https://www.jk.cn'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://www.jk.cn/galaxy/index.html'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">&#125;</span><br><span class="line">data_list=&#123;</span><br><span class="line">    <span class="string">'_mt'</span>:<span class="string">'skydive.infoAndVideoListSearchForH5'</span>,</span><br><span class="line">    <span class="string">'serverVersion'</span>:<span class="string">'V2'</span>,</span><br><span class="line">    <span class="string">'position'</span>:<span class="string">'15000'</span>,</span><br><span class="line">    <span class="string">'keyword'</span>:<span class="string">'心脏病'</span>,</span><br><span class="line">    <span class="string">'_sm'</span>:<span class="string">'md5'</span>,</span><br><span class="line">    <span class="string">'_chl'</span>:<span class="string">'android|WAP'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data_detail=&#123;</span><br><span class="line">    <span class="string">'_mt'</span>:<span class="string">'headline.getShareHeadlineDetail'</span>,</span><br><span class="line">    <span class="string">'_sm'</span>:<span class="string">'md5'</span>,</span><br><span class="line">    <span class="string">'_sv'</span>:<span class="string">'null'</span>,</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateSig</span><span class="params">(e)</span>:</span></span><br><span class="line">    n=<span class="string">''</span></span><br><span class="line">    r=[]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'_sig'</span> <span class="keyword">in</span> e:</span><br><span class="line">        <span class="keyword">del</span> e[<span class="string">'_sig'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">        r.append(i)</span><br><span class="line">    r.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(r)):</span><br><span class="line">        n=n+r[i]+<span class="string">'='</span>+str(e[r[i]])</span><br><span class="line">    n=n+<span class="string">'jk.pingan.com'</span></span><br><span class="line">    hs=open(<span class="string">'./js/hs.js'</span>,<span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    line=hs.readline()</span><br><span class="line">    hs_str=<span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        hs_str=hs_str+line</span><br><span class="line">        line=hs.readline()</span><br><span class="line">    ctx=execjs.compile(hs_str)</span><br><span class="line">    e[<span class="string">'_sig'</span>]=ctx.call(<span class="string">'_'</span>,n)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openArticle</span><span class="params">(id)</span>:</span></span><br><span class="line">    content_url=<span class="string">'https://jkcdn.pajk.com.cn/'</span></span><br><span class="line">    data_detail[<span class="string">'infoId'</span>]=id</span><br><span class="line">    j=execjs.get()</span><br><span class="line">    data_detail[<span class="string">'_st'</span>]=j.eval(<span class="string">'Number(new Date)'</span>)</span><br><span class="line">    </span><br><span class="line">    generateSig(data_detail)</span><br><span class="line">    r=requests.post(url,headers=headers,data=data_detail)</span><br><span class="line">    r_json=r.json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r_json[<span class="string">'stat'</span>][<span class="string">'code'</span>]!=<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'fail:'</span>)</span><br><span class="line">        print(r_json[<span class="string">'stat'</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#取内容</span></span><br><span class="line">    contentTfs=r_json[<span class="string">'content'</span>][<span class="number">0</span>][<span class="string">'contentTfs'</span>]</span><br><span class="line">    content=requests.get(content_url+contentTfs)</span><br><span class="line">    </span><br><span class="line">    pattern = re.compile(<span class="string">r'img.*src="(.*?)"'</span>)</span><br><span class="line">    imgs_url=pattern.findall(content.text)</span><br><span class="line">    <span class="keyword">if</span> len(imgs_url)&gt;<span class="number">3</span>:</span><br><span class="line">        imgs_url=imgs_url[:<span class="number">3</span>]</span><br><span class="line">    imgs_json=json.dumps(imgs_url)</span><br><span class="line">    </span><br><span class="line">    title=r_json[<span class="string">'content'</span>][<span class="number">0</span>][<span class="string">'headlineInfo'</span>][<span class="string">'title'</span>]</span><br><span class="line">    nick=r_json[<span class="string">'content'</span>][<span class="number">0</span>][<span class="string">'accountInfo'</span>][<span class="string">'nick'</span>]</span><br><span class="line">    </span><br><span class="line">    db=pymysql.connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'health_helper'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql=<span class="string">'''INSERT INTO hh_article(a_title,a_from,a_content,a_type,a_click,a_images) VALUES('%s','%s','%s',%s,0,'%s')'''</span> % (title,nick,content.text,len(imgs_url)<span class="number">-1</span> <span class="keyword">if</span>(len(imgs_url)&gt;<span class="number">0</span>) <span class="keyword">else</span> len(imgs_url),imgs_json)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'insert data error'</span>)</span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pageNo=<span class="number">0</span></span><br><span class="line">    pageSize=<span class="number">10</span></span><br><span class="line">    data_list[<span class="string">'pageSize'</span>]=str(pageSize)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data_list[<span class="string">'pageNo'</span>]=str(pageNo)</span><br><span class="line">        generateSig(data_list)</span><br><span class="line">        r=requests.post(url,headers=headers,data=data_list)</span><br><span class="line">        r_json=r.json()</span><br><span class="line">        <span class="keyword">if</span> r_json[<span class="string">'stat'</span>][<span class="string">'code'</span>]!=<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'fail'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        item_arr=r_json[<span class="string">'content'</span>][<span class="number">0</span>][<span class="string">'doc'</span>]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> item_arr:</span><br><span class="line">            <span class="keyword">if</span> item[<span class="string">'headLineType'</span>]==<span class="string">'10000'</span>:</span><br><span class="line">                print(<span class="string">'视频类型头条：'</span>+item[<span class="string">'title'</span>]+<span class="string">'--pass'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            print(<span class="string">'正在爬取：'</span>+item[<span class="string">'title'</span>])</span><br><span class="line">            openArticle(item[<span class="string">'headlineId'</span>])</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">        pageNo=pageNo+<span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>js加密代码文件：<a href="/2857045083/hs.js1" title="[hs.js]">[hs.js]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;临近毕业，毕业设计自然是免不了的。我的课题是一个有关健康的App，需要编写爬虫收集有关健康的知识数据存入数据库，在网上找到了平安好医生这个网站，发现它的数据很适合我的项目，于是便开始着手编写爬虫…&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://evan-hon.netlify.app/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://evan-hon.netlify.app/tags/spider/"/>
    
      <category term="python" scheme="https://evan-hon.netlify.app/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git使用问题整理</title>
    <link href="https://evan-hon.netlify.app/3936287246.html"/>
    <id>https://evan-hon.netlify.app/3936287246.html</id>
    <published>2019-02-21T03:34:17.000Z</published>
    <updated>2021-08-05T07:25:34.479Z</updated>
    
    <content type="html"><![CDATA[<p>对平日里使用Git出现的一些问题进行收集整理…<br><a id="more"></a></p><h3 id="1-凭证存储"><a href="#1-凭证存储" class="headerlink" title="1.凭证存储"></a>1.凭证存储</h3><blockquote><p>问题背景：当首次使用git以Http（Https）协议方式提交代码到coding代码托管平台时，要求输入用户名密码，验证通过才可提交。但之后再次提交时去不再需要输入用户名和密码。正常情况下，使用Http协议每个请求都要带上用户名及密码的，为什么会出现这样的情况？</p></blockquote><a href="https://www.cnblogs.com/volnet/p/git-credentials.html" title="Git凭证存储详解" target="_blank" rel="noopener">Git凭证存储详解</a><p><br></p><h3 id="2-提交代码到远程仓库报错"><a href="#2-提交代码到远程仓库报错" class="headerlink" title="2.提交代码到远程仓库报错"></a>2.提交代码到远程仓库报错</h3><blockquote><p>问题背景：error: failed to push some refs to …<br><img src="/3936287246/git_push_error01.png" title="This is a git_push_error01.png"></p></blockquote><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>在远程仓库存在同名分支并且与本地仓库所在分支没有同步，即远程仓库同名分支内存在有本地仓库中没有的文件。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用命令<code>git pull --rebase origin master</code> 将远程仓库分支与本地仓库分支进行合并。<br><strong>PS:</strong></p><ol><li><p>git pull = fetch + merge</p></li><li><a href="https://www.cnblogs.com/kevingrace/p/5896706.html" title="git pull 与 git pull --rebase 对比" target="_blank" rel="noopener">git pull 与 git pull --rebase 对比</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对平日里使用Git出现的一些问题进行收集整理…&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://evan-hon.netlify.app/categories/Git/"/>
    
    
      <category term="工具" scheme="https://evan-hon.netlify.app/tags/tool/"/>
    
      <category term="经验" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>第一次使用Hexo搭建博客</title>
    <link href="https://evan-hon.netlify.app/4082737920.html"/>
    <id>https://evan-hon.netlify.app/4082737920.html</id>
    <published>2019-02-15T08:36:06.000Z</published>
    <updated>2021-08-05T07:25:34.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>依赖:1.Node.js 2.Git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><h5 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo <span class="keyword">generate</span> -d</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><p>hexo-deployer-git</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="comment">#[your github project address]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>hexo-abbrlink</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: :abbrlink.html #:<span class="built_in">year</span>/:<span class="built_in">month</span>/:<span class="built_in">day</span>/:id/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(<span class="keyword">default</span>) <span class="keyword">and</span> crc32</span><br><span class="line">  rep: dec    # 进制：dec(<span class="keyword">default</span>) <span class="keyword">and</span> <span class="built_in">hex</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="写给自己"><a href="#写给自己" class="headerlink" title="写给自己"></a>写给自己</h3><p>为什么要发表博客？互联网技术发展之迅速，已经超出了我们的想象，在这个以发展为主题的时代中，我们必须让自己紧紧跟着时代的脚步，才不至于被甩得太远。我很欣慰的是，新技术的出现给我带来的感觉不是恐惧，是兴奋，我依旧保持着对所有新技术的好奇，渴望去了解，去参与。但吾生也有涯而学也无崖，随着时间的推移，许多以前了解学习过的知识都被忘得一干二净，等到需要这些知识时便又不得不重拾起学习的进程。终生学习是一种很好的生活态度，但我们却不能陷进学习的死循环里。所以从此刻开始，我将把所学过的内容总结整理在博客中，方便自己也方便有缘的你，如果我的博客能在什么地方帮助到你，我将会很高兴！另外，我想告诫今后的自己，不要为了写文章而写文章，不要忘记自己的初衷。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>配置文件里的配置项冒号后边需要留有一个空格</li><li>Front-matter中即使加了layout: false,文章依然会被处理，目前还不知道原因出在什么地方</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Hexo&quot;&gt;&lt;a href=&quot;#什么是Hexo&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo?&quot;&gt;&lt;/a&gt;什么是Hexo?&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://evan-hon.netlify.app/categories/front/"/>
    
    
      <category term="工具" scheme="https://evan-hon.netlify.app/tags/tool/"/>
    
      <category term="经验" scheme="https://evan-hon.netlify.app/tags/experience/"/>
    
  </entry>
  
</feed>
